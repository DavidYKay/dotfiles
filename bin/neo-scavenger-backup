#!/usr/bin/env python

import shutil
import uuid
import os
import sys


# find the path to the local directory
# /home/dk/.macromedia/Flash_Player/#SharedObjects/VEEEB9L6/localhost/home/dk/.local/share/Steam/SteamApps/common/NEO Scavenger/NEOScavenger

# TODO: figure out the local flash ID

dropbox_path = "/home/dk/Dropbox/Games/NEO Scavenger/"


def get_local_flash_id():
    for f in os.listdir("/home/dk/.macromedia/Flash_Player/#SharedObjects/"):
        #print(f)
        return f

def find_local_savegame_folder():
    local_flash_id = get_local_flash_id()

    savegame_folder = "/home/dk/.macromedia/Flash_Player/#SharedObjects/" + local_flash_id + "/localhost/home/dk/.local/share/Steam/SteamApps/common/NEO Scavenger/NEOScavenger"

    return savegame_folder

def add_dropbox_path(path):
    return dropbox_path + path

def find_newest_backup_folder():
    files = os.listdir(dropbox_path)
    absolute_files = map(add_dropbox_path, files)
    print "files found: " + str(absolute_files)
    #files.sort(key=os.path.getmtime, reverse=True)
    latest_subdir = max(absolute_files, key=os.path.getmtime)
    return latest_subdir

def backup_save():

    # create a temp folder in Dropbox/Games/NEO Scavenger
    temp_id = str(uuid.uuid4())
    #target_folder = "/home/dk/Dropbox/Games/NEO Scavenger/" + temp_id + "/"
    target_folder = dropbox_path + temp_id + "/"

    # copy the savegames to temp folder
    savegame_folder = find_local_savegame_folder()
    shutil.copytree(savegame_folder, target_folder)

def restore_save(backup_folder):
    savegame_folder = find_local_savegame_folder()
    shutil.copytree(backup_folder, savegame_folder)

def restore_most_recent():
    most_recent_folder = find_newest_backup_folder()
    restore_save(most_recent_folder)

def print_usage(message):
    if message:
        print message
    print "Usage: %s [restore | save]" % sys.argv[0]

if len(sys.argv) > 1:
    mode = sys.argv[1]
    if mode == "save":
        backup_save()
    elif mode == "restore":
        restore_most_recent()
    else:
        print_usage("Invalid argument")

else:
    print_usage()

